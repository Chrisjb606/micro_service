# .github/workflows/deploy.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 3) Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4) Build the Docker image
      - name: Build Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/micro_service:${{ github.sha }}
          docker build -t $IMAGE_URI .

      # 5) Push the image to ECR
      - name: Push Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/micro_service:${{ github.sha }}
          docker push $IMAGE_URI

      # 6) Deploy via CloudFormation
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --stack-name micro-service-ecs \
            --template-file infra/ecs.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
                ImageUri=${{ steps.login-ecr.outputs.registry }}/micro_service:${{ github.sha }} \
                ClusterName=micro-service-cluster \
                ServiceName=micro-service-service \
                VpcId=vpc-0abc1234def5678gh \
                SubnetIds=subnet-0123abcd,subnet-4567efgh \
                SecurityGroupIds=sg-0123abcd

