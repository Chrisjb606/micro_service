AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service + Auto-Scaling + CloudWatch Alarm + X-Ray + VPC Networking

Parameters:
  ImageUri:
    Type: String
  ClusterName:
    Type: String
    Default: micro-service-cluster
  ServiceName:
    Type: String
    Default: micro-service-service

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to launch into
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for Fargate
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: SGs for the ENIs

Resources:

  # ──────────────────────────────────────────────────────────────────────────────
  # 1) IAM Role for ECS Task Execution (includes X-Ray write access)
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-task-exec-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # Allows pulling images from ECR, writing to CloudWatch Logs, etc.
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        # Allows the X-Ray daemon to upload traces
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # ──────────────────────────────────────────────────────────────────────────────
  # 2) ECS Task Definition (with X-Ray sidecar)
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ServiceName}-task
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: xray-daemon
          Image: public.ecr.aws/xray/aws-xray-daemon:latest
          Essential: false
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
        - Name: app
          Image: !Ref ImageUri
          Environment:
            - Name: AWS_XRAY_DAEMON_ADDRESS
              Value: "127.0.0.1:2000"
          PortMappings:
            - ContainerPort: 3000

  # ──────────────────────────────────────────────────────────────────────────────
  # 3) ECS Service (must refer to an existing cluster named ${ClusterName})
  MyService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      ServiceName: !Ref ServiceName
      DesiredCount: 1
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:        !Ref SubnetIds
          SecurityGroups: !Ref SecurityGroupIds
          AssignPublicIp: ENABLED

  # ──────────────────────────────────────────────────────────────────────────────
  # 4) Application Auto Scaling – Scalable Target
  #    DependsOn MyService, otherwise CF tries to register a non-existent service.
  MyScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: MyService
    Properties:
      ServiceNamespace: ecs
      ResourceId: !Sub service/${ClusterName}/${ServiceName}
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 10

  # ──────────────────────────────────────────────────────────────────────────────
  # 5) Application Auto Scaling – Target Tracking Policy (CPU)
  CpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CpuScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref MyScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 60.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # ──────────────────────────────────────────────────────────────────────────────
  # 6) CloudWatch Alarm (High CPU)
  HighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUUtilization
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName
        - Name: ServiceName
          Value: !Ref ServiceName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold

Outputs:
  ServiceArn:
    Description: ARN of the ECS Service
    Value: !Ref MyService
